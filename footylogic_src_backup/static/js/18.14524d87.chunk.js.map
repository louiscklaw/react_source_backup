{"version":3,"sources":["components/match/home.js"],"names":["Home","props","useState","fetched","setFetched","dispatch","useDispatch","data","useSelector","selectSearchData","value","selectValue","teamsList","selectTeamsList","filterBy","selectFilterBy","loader","selectLoader","staticKeyWords","selectStaticWords","langugageId","selectLanguageId","useEffect","setFilter","loadSearchData","metaData","className","onClick","href","mcDate","tournament","getItemValue","item","teamName","items","renderItem","isHighlighted","key","itemId","style","background","inputProps","placeholder","SearchByTeamName","onChange","e","getTeamsList","target","onSelect","val","length","map","comp","index","formatDate","label","colSpan","navigateToTournament","id","events","kickOffDateLocal","homeForm","awayForm","hadPredictor","bestBet","event","eventIndex","competitionIdNav","data-href","competitionId","competitionName","kickOffTime","wl","wlIndex","toLowerCase","eventName","getEvenId","countryId","eventId","homeTeamName","awayTeamName","hadHomePct","hadDrawPct","hadAwayPct","bestBetName","subMarketName","outcomeName","isLoader","isNoData","temporarilyNoData","connect","state","home","actions","bindActionCreators"],"mappings":"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","file":"static/js/18.14524d87.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport { bindActionCreators } from \"redux\";\r\nimport { useDispatch,useSelector, connect } from 'react-redux';\r\nimport { loadSearchData,\r\n         selectSearchData,\r\n         selectValue,\r\n         getTeamsList,\r\n         selectTeamsList,\r\n         setFilter,\r\n         selectFilterBy,\r\n         selectLoader,\r\n         selectStaticWords,\r\n         selectLanguageId\r\n          } from './homeSlice';\r\nimport ReactAutocomplete from 'react-autocomplete';\r\nimport {formatDate} from '../../sharedfiles/helper';\r\nimport { getEvenId, navigateToTournament,metaData } from '../../AppSlice';\r\nimport Loading from '../loading/Loading';\r\n// import noImage from '../../assets/images/teams/no-img.png'\r\n\r\nexport function Home(props) {\r\n    const [fetched, setFetched] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const data = useSelector(selectSearchData);\r\n    const value = useSelector(selectValue);\r\n    const teamsList = useSelector(selectTeamsList);\r\n    const filterBy = useSelector(selectFilterBy);\r\n    const loader = useSelector(selectLoader);\r\n    const staticKeyWords = useSelector(selectStaticWords);\r\n    const langugageId = useSelector(selectLanguageId)\r\n    useEffect(() => {\r\n        if (fetched === false) {\r\n            dispatch(setFilter(1));\r\n            dispatch(loadSearchData([],'',1,langugageId)); \r\n            setFetched(true);\r\n            dispatch(metaData(\"Match\"));\r\n          }\r\n      });\r\n\r\n        return (\r\n            <div className=\"mainLanding-page\">\r\n                <div className=\"mainSearchbar\">\r\n                    <div className=\"mainSearchbar-leftSection\">\r\n                        <ul>\r\n                            <li onClick={()=>{dispatch(setFilter(1));dispatch(loadSearchData(teamsList,\"\",1,langugageId))}}>\r\n                                <a href=\"#\" className={filterBy===1?\"active\":\"\"}>{staticKeyWords.mcDate}</a>\r\n                            </li>\r\n                            <li onClick={()=>{dispatch(setFilter(2));dispatch(loadSearchData(teamsList,\"\",2,langugageId))}}>\r\n                                <a href=\"#\" className={filterBy===2?\"active\":\"\"}>{staticKeyWords.tournament}</a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <div className=\"mainSearchbar-rightSection\">\r\n                        <div className=\"form-group form-inline\">\r\n                            <div className=\"form-label\">{/*staticKeyWords.teamSearch*/}</div>\r\n                            <div className=\"form-control\">\r\n                               {/* <input placeholder=\"Search by Team name\" type=\"text\" />*/}\r\n                                <ReactAutocomplete\r\n                                    getItemValue={(item) => item?.teamName}\r\n                                    items={teamsList}\r\n                                    renderItem={(item, isHighlighted) =>\r\n                                        <div key={item.itemId} style={{ background: isHighlighted ? 'lightgray' : 'white' }}>\r\n                                            {item.teamName}\r\n                                        </div>\r\n                                    }\r\n                                    inputProps={{ placeholder: staticKeyWords.SearchByTeamName }}\r\n                                    value={value}\r\n                                    onChange={(e)=>dispatch(getTeamsList(e.target.value,filterBy,langugageId))}\r\n                                    onSelect={(val) => dispatch(loadSearchData(teamsList,val,filterBy,langugageId))}\r\n                                    />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n                    {data && data.length>0 ? data.map(function(comp,index){\r\n                        var dateFormat ={};\r\n                        if(filterBy===1){\r\n                            dateFormat =formatDate(comp.label,'home');\r\n                        }\r\n                         \r\n                        return <div key={index} className=\"contentBg\">\r\n                            <table className=\"tableDefault\">\r\n \r\n                        <thead>\r\n                            <tr>\r\n                                <th colSpan=\"2\" className=\"w-date\" onClick={()=> dispatch(navigateToTournament(comp.id,props,filterBy,'tournament'))}>{filterBy===1?comp?.events[0]?.kickOffDateLocal:comp.label}</th>\r\n                                {/* <th className=\"w-koTime\">{staticKeyWords.koTime}</th> */}\r\n                                <th className=\"w-form\">{staticKeyWords.homeForm}</th>\r\n                                <th className=\"w-fixture\"></th>\r\n                                <th className=\"w-form\">{staticKeyWords.awayForm}</th>\r\n                                <th className=\"w-winPredictor\">{staticKeyWords.hadPredictor} (%)</th>\r\n                                <th className=\"w-bestBet\">{staticKeyWords.bestBet}</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                comp.events.map(function(event,eventIndex){\r\n                                    //var kickOffDT=formatDate(event.kickOff,'home');\r\n                                    return <tr key={eventIndex}>\r\n                                    <td>\r\n                                   {event.competitionIdNav!=null? <div data-href=\"true\" onClick={()=> dispatch(navigateToTournament(event.competitionId,props,filterBy,'date'))}>{filterBy===2?event.kickOffDateLocal:event.competitionName?event.competitionName:\"\"}</div>:\r\n                                   <div>{filterBy===2?event.kickOffDateLocal:event.competitionName?event.competitionName:\"\"}</div>}\r\n                                    </td>\r\n                                    <td>{event.kickOffTime}</td>\r\n                                    <td>\r\n                                        <div data-href=\"true\" className=\"team-lastForm\">\r\n                                            {\r\n                                                event.homeForm.map(function(wl,wlIndex){\r\n                                                    return <span key={wlIndex} className={\"status \"+(wl.toLowerCase()==='w'?'win':wl.toLowerCase()==='l'?\"loss\":wl.toLowerCase()==='d'?\"draw\":\"\")}>{staticKeyWords[wl.toLowerCase()]}</span>\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </td>\r\n                                    <td data-href=\"true\">\r\n                                        <div className=\"table-fixture\">{event.eventName}</div>\r\n                                        <div className=\"table-fixture\" onClick={()=> {dispatch(getEvenId({countryId:event.countryId,\r\n                                                                                  competitionId:(filterBy==1)?event.competitionId:comp.id,\r\n                                                                                  eventId:event.eventId},'home',props))}}>\r\n                                            <div className=\"team-image\"><div className=\"homeTeam-name\">{event.homeTeamName}</div>{/*<div><img src={event.homeTeamImgUrl==\"\" || !event.homeTeamImgUrl?noImage:event.homeTeamImgUrl}/></div>*/}</div>\r\n                                            <div className=\"team-vs\">vs</div>\r\n                                            <div className=\"team-image\">{/*<div><img src={event.awayTeamImgUrl==\"\" || !event.awayTeamImgUrl?noImage:event.awayTeamImgUrl}/></div>*/}<div className=\"awayTeam-name\">{event.awayTeamName}</div></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div data-href=\"true\" className=\"team-lastForm\">\r\n                                            {\r\n                                                event.awayForm.map(function(wl,wlIndex){\r\n                                                    return <span key={wlIndex} className={\"status \"+(wl.toLowerCase()==='w'?'win':wl.toLowerCase()==='l'?\"loss\":wl.toLowerCase()==='d'?\"draw\":\"\")}>{staticKeyWords[wl.toLowerCase()]}</span>\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </td>\r\n                                    <td data-href=\"true\">\r\n                                        <div className=\"win-predictor\">\r\n                                        {(event.hadHomePct && event.hadDrawPct && event.hadAwayPct)? <><span className=\"percentage win\" style={{\"width\": event.hadHomePct+'%'}}>{event.hadHomePct}</span>\r\n                                            <span className=\"percentage draw\" style={{\"width\": event.hadDrawPct+'%'}}>{event.hadDrawPct}</span>\r\n                                            <span className=\"percentage loss\" style={{\"width\": event.hadAwayPct+'%'}}>{event.hadAwayPct}</span>\r\n                                           </>:<span>-</span> }\r\n                                        </div>\r\n                                    </td>\r\n                                    <td data-href=\"true\">\r\n                                        {event.bestBetName}{event.subMarketName && event.subMarketName.length>0?`[${event.subMarketName}]`:\"\"} - {event.outcomeName}\r\n                                    </td>\r\n                                </tr>\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                 </div>\r\n                    }):<Loading isLoader={loader} isNoData={!loader && !data.length} temporarilyNoData={staticKeyWords.temporarilyNoData}/> \r\n                    }\r\n                   \r\n            </div>\r\n        );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        filterBy:state.home.filterBy\r\n    };\r\n  }\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        dispatch,\r\n        actions: bindActionCreators({\r\n\r\n        }, dispatch)\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);"],"sourceRoot":""}